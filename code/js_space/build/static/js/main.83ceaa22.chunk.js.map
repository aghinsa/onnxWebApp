{"version":3,"sources":["Components/Layouts/Header.js","Components/model_helper.js","Components/utils.js","Components/Models/index.js","store.js","Components/App.js","index.js"],"names":["props","AppBar","position","Toolbar","Typography","variant","color","run_inference","session","sample_input","a","console","log","start","Date","startProfiling","run","outputData","endProfiling","outputDataTensor","values","next","value","data","end","time_taken","getTime","run_model","model_path","input_shape","epochs","updateProgress","updateLog","profiler_configs","maxNumberEvents","flushIntervalInMilliseconds","flushBatchSize","InferenceSession","Profiler","full_model_path","process","fetch","model_file","blob","loadModel","generate_random_array","inference_times","output_data_tensors","i","inferenceTime","push","shape","as_tensor","data_type","len","reduce","b","ndarray","Float32Array","ops","random","arr","tensor","Tensor","model","downloadAfterRun","x","saved_model","inf_data","mean","std","title","inf_data_json","JSON","stringify","encodedUri","encodeURI","link","document","createElement","setAttribute","body","appendChild","click","handleModelClick","handleRunAllClick","models","get_model_data_as_csv","range","count","Array","keys","map","csv_string","id","join","csv_data","Promise","all","epoch_heading","csvContent","ConsoleLogger","state","logs","Hook","window","setState","Decode","Paper","style","backgroundColor","height","overflowY","this","React","Component","styles","paper","padding","marginTop","marginBottom","ModelButton","status","progress","total","num_models","length","handleClick","bind","val","TextField","label","onChange","event","target","Button","size","onClick","marginRight","toFixed","Models","viewConsole","per_model_epochs","handleCheckboxClick","name","Grid","container","item","sm","FormControlLabel","control","Checkbox","checked","List","component","ListItem","button","key","handleModelClickSingle","ListItemText","primary","display","showConsoleComponent","description","File","FileReader","FileList","Blob","alert","Header","ReactDOM","render","getElementById"],"mappings":"6SAGe,WAAAA,GAAK,OAClB,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,WAA/B,a,6KCFC,SAAeC,EAAtB,oC,4CAAO,WACLC,EACAC,GAFK,uBAAAC,EAAA,6DAILC,QAAQC,IAAI,qBACNC,EAAQ,IAAIC,KAClBH,QAAQC,IAAI,8BACZJ,EAAQO,iBAPH,SAQoBP,EAAQQ,IAAI,CAACP,IARjC,cAQCQ,EARD,OASLT,EAAQU,eACFC,EAAmBF,EAAWG,SAASC,OAAOC,MAAMC,KAC1DZ,QAAQC,IAAI,cAAeK,GAC3BN,QAAQC,IAAI,cACZD,QAAQC,IAAI,oBAAqBO,GAC3BK,EAAM,IAAIV,KACVW,EAAaD,EAAIE,UAAYb,EAAMa,UACzCf,QAAQC,IAAI,yBAA0Ba,GAhBjC,kBAiBE,CAACA,EAAYN,IAjBf,6C,sBAoBA,SAAeQ,EAAtB,0C,4CAAO,WACLC,EACAC,EACAC,EACAC,EACAC,GALK,qCAAAtB,EAAA,6DAYCuB,EAAmB,CACvBC,gBAAiB,IACjBC,4BAA6B,IAC7BC,eAAgB,IAEZ5B,EAAU,IAAI6B,mBAAiB,CAAEC,SAAUL,IAEjDtB,QAAQC,IAAI,cACZD,QAAQC,IAAI,eAAgBJ,GAEtB+B,EAAkBC,KAA+BZ,EACvDjB,QAAQC,IAAI,2BAA4B2B,GAvBnC,SA4BkBE,MAAMF,GA5BxB,cA4BDG,EA5BC,iBA6BcA,EAAWC,OA7BzB,eA6BLD,EA7BK,OA8BL/B,QAAQC,IAAI,cAAe8B,GA9BtB,UA+BClC,EAAQoC,UAAUF,GA/BnB,QAgCL/B,QAAQC,IAAI,gBACZD,QAAQC,IAAI,0BAA2BiB,GACjCpB,EAAeoC,EAAsBhB,GACvCiB,EAAkB,GAClBC,EAAsB,GAK1BpC,QAAQC,IAAI,mBAAoBkB,GAC3BkB,EAAI,EA1CJ,aA0COA,EAAIlB,GA1CX,4CA4CyCvB,EAAcC,EAASC,GA5ChE,oCA4CAwC,EA5CA,KA4Ce9B,EA5Cf,wDA8CDR,QAAQC,IAAI,uBAAZ,MACAD,QAAQC,IAAI,gBACZqC,GAAiB,EAhDhB,QAkDHH,EAAgBI,KAAKD,GACrBF,EAAoBG,KAAK/B,GACzBR,QAAQC,IAAI,WAAaoC,EAAI,GAAK,gBAAkBC,GAChDjB,GAAWD,EAAe,GArD3B,QA0CmBiB,IA1CnB,+BAwDLrC,QAAQC,IAAI,qBAAsBkC,GAClCnC,QAAQC,IAAI,sBAzDP,kBA0DE,CAAEkC,kBAAiBC,wBA1DrB,4D,2CCfA,SAASF,EACdM,GAGC,IAFDC,IAEA,yDADAC,EACA,uDADY,UAENC,EAAMH,EAAMI,QAAO,SAAC7C,EAAG8C,GAAJ,OAAU9C,EAAI8C,IAAG,GACpCjC,EAAOkC,IAAQ,IAAIC,aAAaJ,IACtCK,IAAIC,OAAOrC,GACX,IAAMsC,EAAMJ,IAAQlC,EAAM4B,GACpBW,EAAS,IAAIC,SAAOF,EAAItC,KAAKA,KAAM8B,EAAWF,GACpD,OAAIC,EAAkBU,EACfD,E,4CAGF,WAAsCG,EAAOlC,EAAQmC,GAArD,iCAAAvD,EAAA,6DACDqB,EAAiB,SAAUmC,GAC7B,OAAOA,GAEDf,EAAuBa,EAAvBb,MAAOgB,EAAgBH,EAAhBG,YAJV,SAKkDxC,EACrDwC,EACAhB,EACArB,EACAC,GACA,GAVG,uBAKGe,EALH,EAKGA,gBAAiBC,EALpB,EAKoBA,oBAOzBpC,QAAQC,IAAI,8BAA+BkC,GACrCsB,EAAW,CACftB,gBAAiBA,EACjBuB,KAAMA,YAAKvB,GACXwB,IAAKA,YAAIxB,GACTC,oBAAqBA,GAEvBpC,QAAQC,IAAI,4BAA8BoD,EAAMO,MAAQ,UAAWH,GACnEzD,QAAQC,IAAI,qBAAsBqD,GAC9BA,IACIO,EAAgBC,KAAKC,UAAUN,GAEjCO,EAAaC,UADC,gCAAkCJ,IAEhDK,EAAOC,SAASC,cAAc,MAC7BC,aAAa,OAAQL,GAC1BE,EAAKG,aAAa,WAAY,YAC9BF,SAASG,KAAKC,YAAYL,GAC1BA,EAAKM,SA7BF,kBAgCEf,GAhCF,6C,sBAmCA,SAAegB,EAAtB,sC,4CAAO,WAAgCpB,EAAOlC,EAAQC,GAA/C,uBAAArB,EAAA,6DACGyC,EAAuBa,EAAvBb,MAAOgB,EAAgBH,EAAhBG,YADV,SAEkDxC,EACrDwC,EACAhB,EACArB,EACAC,GACA,GAPG,uBAEGe,EAFH,EAEGA,gBAFH,EAEoBC,oBAOzBpC,QAAQC,IAAI,8BAA+BkC,GACrCsB,EAAW,CACftB,gBAAiBA,EACjBuB,KAAMA,YAAKvB,GACXwB,IAAKA,YAAIxB,IAEXnC,QAAQC,IAAI,4BAA8BoD,EAAMO,MAAQ,UAAWH,GAf9D,kBAgBEA,GAhBF,6C,sBAmBA,SAAeiB,EAAtB,sC,4CAAO,WAAiCC,EAAQxD,EAAQC,GAAjD,MAGUwD,EAHV,EA2BIC,EA3BJ,aAAA9E,EAAA,6DA2BI8E,EA3BJ,SA2BUC,EAAO5E,GACpB,OAAO,YAAI6E,MAAMD,GAAOE,QAAQC,KAAI,SAAA1B,GAAC,OAAIrD,EAAQqD,MA5B9C,oCAAAxD,EAAA,MAGL,WAAqCsD,GAArC,iBAAAtD,EAAA,6DACEC,QAAQC,IAAI,sBAAuBoD,GADrC,SAEyBoB,EAAiBpB,EAAOlC,EAAQC,GAFzD,cAEQqC,EAFR,OAGEzD,QAAQC,IAAI,uBAAwBwD,GAE9ByB,EAAa,CACjB7B,EAAM8B,GACN1B,EAASC,KACTD,EAASE,KAHQ,mBAIdF,EAAStB,kBACZiD,KAAK,KAVT,kBAWSF,GAXT,4CAHK,uBAGUN,EAHV,4CACDS,EAAW,GADV,SAiBCC,QAAQC,IACZZ,EAAOM,IAAP,uCAAW,WAAM5B,GAAN,eAAAtD,EAAA,sEACgB6E,EAAsBvB,GADtC,OACH6B,EADG,OAETG,EAAS9C,KAAK2C,GACdlF,QAAQC,IAAI,kBAAoBoD,EAAMO,MAAQ,MAAOsB,GAH5C,2CAAX,wDAlBG,cAyBLlF,QAAQC,IAAI,+BAAgCoF,GAMtCG,EAAgBX,EAAM1D,EAAQ,GACjC8D,KAAI,SAAA1B,GAAC,MAAI,SAAWA,KACpB6B,KAAK,KAEJK,EACF,gCAFc,kBAAoBD,GAES,KAAOH,EAASD,KAAK,MApC7D,kBAqCEK,GArCF,6C,sBAwCA,IAAMC,EAAb,2MACEC,MAAQ,CACNC,KAAM,IAFV,mFAKuB,IAAD,OAClBC,eAAKC,OAAO9F,SAAS,SAAAC,GACnB,EAAK8F,UAAS,gBAAGH,EAAH,EAAGA,KAAH,MAAe,CAAEA,KAAK,GAAD,mBAAMA,GAAN,CAAYI,iBAAO/F,YAGxDD,QAAQC,IAAR,wBAVJ,+BAcI,OACE,kBAAC,WAAD,KACE,kBAACgG,EAAA,EAAD,KACE,yBACEC,MAAO,CACLC,gBAAiB,UACjBC,OAAQ,IACRC,UAAW,SAGb,kBAAC,UAAD,CAAST,KAAMU,KAAKX,MAAMC,KAAMlG,QAAQ,gBAxBpD,GAAmC6G,IAAMC,WClGnCC,EAAS,CACbC,MAAO,CACLC,QAAS,GACTC,UAAW,GACXC,aAAc,GACdT,OAAQ,IACRC,UAAW,SAITS,E,YACJ,WAAYzH,GAAQ,IAAD,8BACjB,4CAAMA,KACDsG,MAAQ,CACXoB,OAAQ,QACRC,SAAU,EACV7F,OAAQ,GACR8F,MAAO,EACPC,WAAY,GAEd,EAAKvB,MAAMsB,MAAQ,EAAKtB,MAAMxE,OAAS,EAAK9B,MAAMsF,OAAOwC,OACzD,EAAKxB,MAAMuB,WAAa,EAAK7H,MAAMsF,OAAOwC,OAE1CnH,QAAQC,IAAI,UAAW,EAAK0F,MAAMsB,OAClC,EAAKG,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKjG,eAAiB,EAAKA,eAAeiG,KAApB,gBAdL,E,4EAiBJC,GACbhB,KAAKP,UAAS,SAAAJ,GAEZ,OADAA,EAAMqB,SAAWrB,EAAMqB,SAAWM,EAC3B3B,O,mKAITW,KAAKP,UAAS,SAAAJ,GAEZ,OADAA,EAAMoB,OAAS,UACRpB,KAGHhB,EAAS2B,KAAKjH,MAAMsF,OACpBxD,EAASmF,KAAKX,MAAMxE,O,SACDuD,EACvBC,EACAxD,EACAmF,KAAKlF,gB,OAHDqE,E,OAKNa,KAAKP,UAAS,SAAAJ,GAGZ,OAFAA,EAAMoB,OAAS,YACfpB,EAAMqB,SAAW,EACVrB,KAET3F,QAAQC,IAAI,gBAAiBqG,KAAKjH,MAAMiE,kBACpCgD,KAAKjH,MAAMiE,mBACTU,EAAaC,UAAUwB,IACvBvB,EAAOC,SAASC,cAAc,MAC7BC,aAAa,OAAQL,GAC1BE,EAAKG,aAAa,WAAY,sBAC9BF,SAASG,KAAKC,YAAYL,GAE1BA,EAAKM,S,qIAGC,IAAD,OACP,OACE,kBAAC,WAAD,KACE,6BACE,kBAAC+C,EAAA,EAAD,CACEpC,GAAG,aACHqC,MAAM,mBACN7G,MAAO2F,KAAKX,MAAMxE,OAClBsG,SAAU,SAAAC,GACR,IAAMJ,EAAMI,EAAMC,OAAOhH,MACzB,EAAKoF,UAAS,SAAAJ,GAGZ,OAFAA,EAAMxE,OAASmG,EACf3B,EAAMsB,MAAQK,EAAM3B,EAAMuB,WACnBvB,KAET3F,QAAQC,IAAI,UAAW,EAAK0F,MAAMxE,QAClCnB,QAAQC,IAAI,SAAU,EAAK0F,MAAMsB,WAIvC,kBAACW,EAAA,EAAD,CACElI,QAAQ,YACRC,MAAM,UACNkI,KAAK,QACLC,QAASxB,KAAKc,YACdlB,MAAO,CAAEU,UAAW,GAAIC,aAAc,GAAIkB,YAAa,KAEtDzB,KAAKX,MAAMoB,OAAQ,IACE,WAArBT,KAAKX,MAAMoB,QACgB,IAAtBT,KAAKX,MAAMqB,SAAkBV,KAAKX,MAAMsB,OAAOe,QAAQ,GAAK,IAC9D,S,GAnFYzB,IAAMC,WA0FXyB,E,YAGnB,WAAY5I,GAAQ,IAAD,8BACjB,4CAAMA,KAEDsG,MAAQ,CAAEuC,aAAa,EAAO5E,kBAAkB,EAAM6E,iBAAkB,IAE7E,EAAKC,oBAAsB,EAAKA,oBAAoBf,KAAzB,gBALV,E,iFAWCgB,EAAMX,GACxB1H,QAAQC,IAAI,oBACZqG,KAAKP,UAAS,SAACJ,GAA4C,OAAhCA,EAAMrC,iBAAmBoE,EAAc/B,O,6CAIlE,OACE,kBAAC,WAAD,KACGW,KAAKX,MAAMuC,YAAc,kBAAC,EAAD,MAAoB,iC,+BAK1C,IAAD,OACDvD,EAAS2B,KAAKjH,MAAMsF,OAC1B,OACE,kBAAC2D,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,GACX,kBAACxC,EAAA,EAAD,CAAOC,MAAOO,EAAOC,OAEnB,kBAACgC,EAAA,EAAD,CACEC,QAAS,kBAACC,EAAA,EAAD,CAAUC,QAASvC,KAAKX,MAAMrC,iBAAkB3D,MAAM,UAC7D8H,SAAUnB,KAAK8B,sBAEjBZ,MAAM,iBAGR,kBAACD,EAAA,EAAD,CACEpC,GAAG,uBACHqC,MAAM,mBACN7G,MAAO2F,KAAKX,MAAMwC,iBAClBV,SAAU,SAAAC,GACR,IAAMJ,EAAMI,EAAMC,OAAOhH,MACzB,EAAKoF,UAAS,SAAAJ,GAEZ,OADAA,EAAMwC,iBAAmBb,EAClB3B,KAET3F,QAAQC,IAAI,UAAW,EAAK0F,MAAMwC,qBAItC,kBAACW,EAAA,EAAD,CAAMC,UAAU,MACbpE,EAAOM,KAAI,SAAA5B,GAAK,OACf,kBAAC2F,EAAA,EAAD,CACEC,QAAM,EACNC,IAAK7F,EAAM8B,GACX2C,QAAS,kBD5JpB,SAAP,sCC4JiCqB,CAAuB9F,EAAO,EAAKsC,MAAMwC,iBAAkB,EAAKxC,MAAMrC,oBAErF,kBAAC8F,EAAA,EAAD,CAAcC,QAAShG,EAAMO,eAQvC,kBAAC0E,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,GACX,kBAACxC,EAAA,EAAD,CAAOC,MAAOO,EAAOC,OACnB,kBAACjH,EAAA,EAAD,CACEC,QAAQ,KACRwG,MAAO,CAAEU,UAAW,GAAIC,aAAc,GAAIyC,QAAS,UAFrD,kBAOA,6BACE,kBAAC,EAAD,CAAa3E,OAAQA,EAAQxD,OAAQ,EAAGmC,iBAAkBgD,KAAKX,MAAMrC,mBACrE,kBAACsE,EAAA,EAAD,CACElI,QAAQ,YACRC,MAAM,UACNkI,KAAK,QACLC,QAAS,WACP,EAAK/B,UAAS,SAAAJ,GAEZ,OADAA,EAAMuC,aAAevC,EAAMuC,YACpBvC,OAPb,YAcF,6BAAMW,KAAKiD,+B,GA/Fa/C,aCvHvB7B,EAAS,CACpB,CACEQ,GAAI,kBACJvB,MAAO,iBACP4F,YAAa,0BACbhH,MAAO,CAAC,EAAG,EAAG,IAAK,KACnBgB,YAAa,uBAEf,CACE2B,GAAI,mBACJvB,MAAO,mBACP4F,YAAa,wBACbhH,MAAO,CAAC,EAAG,EAAG,IAAK,KACnBgB,YAAa,wBAEf,CACE2B,GAAI,oBACJvB,MAAO,oBACP4F,YAAa,0BACbhH,MAAO,CAAC,EAAG,EAAG,KAAM,MACpBgB,YAAa,gCAEf,CACE2B,GAAI,uBACJvB,MAAO,oBACP4F,YAAa,+BACbhH,MAAO,CAAC,EAAG,EAAG,IAAK,KACnBgB,YAAa,mC,6MCrBfmC,MAAQ,CACNhB,OAAQA,G,wEAUR,OANImB,OAAO2D,MAAQ3D,OAAO4D,YAAc5D,OAAO6D,UAAY7D,OAAO8D,KAChE5J,QAAQC,IAAI,qBAEZ4J,MAAM,0DAIN,kBAAC,WAAD,KACE,kBAACC,EAAD,MACA,kBAAC,EAAD,CAAQnF,OAAQ2B,KAAKX,MAAMhB,c,GAfN6B,aCA7BuD,IAASC,OAAO,kBAAC,EAAD,MAAS7F,SAAS8F,eAAe,W","file":"static/js/main.83ceaa22.chunk.js","sourcesContent":["import React from \"react\";\nimport { AppBar, Toolbar, Typography } from \"@material-ui/core/\";\n\nexport default props => (\n  <AppBar position=\"static\">\n    <Toolbar>\n      <Typography variant=\"h5\" color=\"inherit\">\n        Models\n      </Typography>\n    </Toolbar>\n  </AppBar>\n);\n","import { generate_random_array } from \"./utils.js\";\nimport { InferenceSession } from \"onnxjs\";\n\n\nexport async function run_inference(\n  session, //InferenceSession,\n  sample_input // Tensor\n) {\n  console.log(\"running inference\");\n  const start = new Date();\n  console.log(\"Starting session profiling\");\n  session.startProfiling();\n  const outputData = await session.run([sample_input]); // output data is a promise\n  session.endProfiling();\n  const outputDataTensor = outputData.values().next().value.data;\n  console.log(\"Output data\", outputData);\n  console.log(\"got output\");\n  console.log(\"OtputDataTensor :\", outputDataTensor)\n  const end = new Date();\n  const time_taken = end.getTime() - start.getTime();\n  console.log(\"Ran model, Time taken:\", time_taken);\n  return [time_taken, outputDataTensor];\n}\n\nexport async function run_model(\n  model_path,\n  input_shape,\n  epochs,\n  updateProgress,\n  updateLog\n) {\n  /**\n   * Runs model in model path and returs array of inference times\n   */\n  // backends cpu,wasm,webgl\n  // const session = new InferenceSession({ backendHint: \"wasm\" });\n  const profiler_configs = {\n    maxNumberEvents: 10000,\n    flushIntervalInMilliseconds: 10000,\n    flushBatchSize: 32\n  };\n  const session = new InferenceSession({ Profiler: profiler_configs });\n\n  console.log(\"New config\");\n  console.log(\"New session \", session);\n  // load model\n  const full_model_path = process.env.PUBLIC_URL + \"/\" + model_path;\n  console.log(\"Loading model from path \", full_model_path);\n\n  // uncomment to load model from path\n  // await session.loadModel(full_model_path);\n\n  let model_file = await fetch(full_model_path);\n  model_file = await model_file.blob();\n  console.log(\"MODEL FILE \", model_file);\n  await session.loadModel(model_file);\n  console.log(\"model loaded\");\n  console.log(\"running input of shape \", input_shape);\n  const sample_input = generate_random_array(input_shape);\n  var inference_times = [];\n  var output_data_tensors = [];\n  var i;\n  var inferenceTime;\n  var outputDataTensor;\n\n  console.log(\"running epochs :\", epochs);\n  for (i = 0; i < epochs; i++) {\n    try {\n      [inferenceTime, outputDataTensor] = await run_inference(session, sample_input);\n    } catch (err) {\n      console.log(\"Running failed with \", err);\n      console.log(\"Returning -1\");\n      inferenceTime = -1;\n    }\n    inference_times.push(inferenceTime);\n    output_data_tensors.push(outputDataTensor)\n    console.log(\"Epoch: \" + (i + 1) + \" Time taken: \" + inferenceTime);\n    if (updateLog) updateProgress(1);\n  }\n  // inference_times = await Promise.all(inference_times);\n  console.log(\"Inference times : \", inference_times);\n  console.log(\"running model done\");\n  return { inference_times, output_data_tensors };\n}\n","import ndarray from \"ndarray\";\nimport ops from \"ndarray-ops\";\nimport { Tensor } from \"onnxjs\";\nimport { run_model } from \"./model_helper.js\";\nimport { std, mean } from \"mathjs\";\nimport { Hook, Console, Decode } from \"console-feed\";\nimport React, { Fragment } from \"react\";\nimport { Paper } from \"@material-ui/core\";\n\nexport function generate_random_array(\n  shape,\n  as_tensor = true,\n  data_type = \"float32\"\n) {\n  const len = shape.reduce((a, b) => a * b, 1);\n  const data = ndarray(new Float32Array(len));\n  ops.random(data);\n  const arr = ndarray(data, shape);\n  const tensor = new Tensor(arr.data.data, data_type, shape);\n  if (as_tensor) return tensor;\n  return arr;\n}\n\nexport async function handleModelClickSingle(model, epochs, downloadAfterRun) {\n  let updateProgress = function (x) {\n    return x;\n  };\n  const { shape, saved_model } = model;\n  const { inference_times, output_data_tensors } = await run_model(\n    saved_model,\n    shape,\n    epochs,\n    updateProgress,\n    false // dont call update progress\n  );\n  console.log(\"handling model click done ,\", inference_times);\n  const inf_data = {\n    inference_times: inference_times,\n    mean: mean(inference_times),\n    std: std(inference_times),\n    output_data_tensors: output_data_tensors\n  };\n  console.log(\"Inference Data for model \" + model.title + \" data: \", inf_data);\n  console.log(\"Should save data?:\", downloadAfterRun)\n  if (downloadAfterRun) {\n    const inf_data_json = JSON.stringify(inf_data)\n    let jsonContent = \"data:text/json;charset=utf-8,\" + inf_data_json\n    var encodedUri = encodeURI(jsonContent);\n    var link = document.createElement(\"a\");\n    link.setAttribute(\"href\", encodedUri);\n    link.setAttribute(\"download\", \"log.json\");\n    document.body.appendChild(link); // Required for FF\n    link.click();\n  }\n\n  return inf_data;\n}\n\nexport async function handleModelClick(model, epochs, updateProgress) {\n  const { shape, saved_model } = model;\n  const { inference_times, output_data_tensors } = await run_model(\n    saved_model,\n    shape,\n    epochs,\n    updateProgress,\n    true // Call update progress\n  );\n  console.log(\"handling model click done ,\", inference_times);\n  const inf_data = {\n    inference_times: inference_times,\n    mean: mean(inference_times),\n    std: std(inference_times)\n  };\n  console.log(\"Inference Data for model \" + model.title + \" data: \", inf_data);\n  return inf_data;\n}\n\nexport async function handleRunAllClick(models, epochs, updateProgress) {\n  var csv_data = [];\n\n  async function get_model_data_as_csv(model) {\n    console.log(\"Getting model csv :\", model);\n    const inf_data = await handleModelClick(model, epochs, updateProgress);\n    console.log(\"In runAll inf_data :\", inf_data);\n    // model_name,mean,std,...timings\n    const csv_string = [\n      model.id,\n      inf_data.mean,\n      inf_data.std,\n      ...inf_data.inference_times\n    ].join(\",\");\n    return csv_string;\n  }\n\n  await Promise.all(\n    models.map(async model => {\n      const csv_string = await get_model_data_as_csv(model);\n      csv_data.push(csv_string);\n      console.log(\"Csv string for \" + model.title + \" : \", csv_string);\n    })\n  );\n\n  console.log(\"got all csv strings,csv data\", csv_data);\n\n  function range(count, start) {\n    return [...Array(count).keys()].map(x => start + x);\n  }\n\n  const epoch_heading = range(epochs, 1)\n    .map(x => \"epoch_\" + x)\n    .join(\",\");\n  const heading = \"model,mean,std,\" + epoch_heading;\n  let csvContent =\n    \"data:text/csv;charset=utf-8,\" + heading + \"\\n\" + csv_data.join(\"\\n\");\n  return csvContent;\n}\n\nexport class ConsoleLogger extends React.Component {\n  state = {\n    logs: []\n  };\n\n  componentDidMount() {\n    Hook(window.console, log => {\n      this.setState(({ logs }) => ({ logs: [...logs, Decode(log)] }));\n    });\n\n    console.log(`Logging to console`);\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <Paper>\n          <div\n            style={{\n              backgroundColor: \"#242424\",\n              height: 250,\n              overflowY: \"auto\"\n            }}\n          >\n            <Console logs={this.state.logs} variant=\"dark\" />\n          </div>\n        </Paper>\n      </Fragment>\n    );\n  }\n}\n","import React, { Component, Fragment } from \"react\";\nimport {\n  List,\n  ListItem,\n  ListItemText,\n  Paper,\n  Grid,\n  Typography,\n  Button,\n  TextField,\n  Checkbox,\n  FormControlLabel\n} from \"@material-ui/core\";\nimport {\n  handleModelClickSingle,\n  handleRunAllClick,\n  ConsoleLogger\n} from \"../utils\";\n\nconst styles = {\n  paper: {\n    padding: 20,\n    marginTop: 10,\n    marginBottom: 10,\n    height: 650,\n    overflowY: \"auto\"\n  }\n};\n\nclass ModelButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: \"Start\",\n      progress: 0,\n      epochs: 30,\n      total: 0,\n      num_models: 0\n    };\n    this.state.total = this.state.epochs * this.props.models.length;\n    this.state.num_models = this.props.models.length;\n\n    console.log(\"Total :\", this.state.total);\n    this.handleClick = this.handleClick.bind(this);\n    this.updateProgress = this.updateProgress.bind(this);\n  }\n\n  updateProgress(val) {\n    this.setState(state => {\n      state.progress = state.progress + val;\n      return state;\n    });\n  }\n  async handleClick() {\n    this.setState(state => {\n      state.status = \"Running\";\n      return state;\n    });\n\n    const models = this.props.models;\n    const epochs = this.state.epochs;\n    const csvContent = await handleRunAllClick(\n      models,\n      epochs,\n      this.updateProgress\n    );\n    this.setState(state => {\n      state.status = \"Completed\";\n      state.progress = 0;\n      return state;\n    });\n    console.log(\"Should save?:\", this.props.downloadAfterRun)\n    if (this.props.downloadAfterRun) {\n      var encodedUri = encodeURI(csvContent);\n      var link = document.createElement(\"a\");\n      link.setAttribute(\"href\", encodedUri);\n      link.setAttribute(\"download\", \"inference_data.csv\");\n      document.body.appendChild(link); // Required for FF\n\n      link.click();\n    }\n  }\n  render() {\n    return (\n      <Fragment>\n        <div>\n          <TextField\n            id=\"num_epochs\"\n            label=\"Number Of Epochs\"\n            value={this.state.epochs}\n            onChange={event => {\n              const val = event.target.value;\n              this.setState(state => {\n                state.epochs = val;\n                state.total = val * state.num_models;\n                return state;\n              });\n              console.log(\"Epochs \", this.state.epochs);\n              console.log(\"Total \", this.state.total);\n            }}\n          />\n        </div>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"large\"\n          onClick={this.handleClick}\n          style={{ marginTop: 10, marginBottom: 10, marginRight: 10 }}\n        >\n          {this.state.status}{\" \"}\n          {this.state.status == \"Running\"\n            ? ((this.state.progress * 100) / this.state.total).toFixed(2) + \"%\"\n            : \"\"}\n        </Button>\n      </Fragment>\n    );\n  }\n}\n\nexport default class Models extends Component {\n\n\n  constructor(props) {\n    super(props);\n\n    this.state = { viewConsole: false, downloadAfterRun: true, per_model_epochs: 30 };\n\n    this.handleCheckboxClick = this.handleCheckboxClick.bind(this);\n\n  }\n\n\n\n  handleCheckboxClick(name, event) {\n    console.log(\"Checkbox clicked\")\n    this.setState((state) => { state.downloadAfterRun = event; return state })\n  }\n\n  showConsoleComponent() {\n    return (\n      <Fragment>\n        {this.state.viewConsole ? <ConsoleLogger /> : <div></div>}\n      </Fragment>\n    );\n  }\n\n  render() {\n    const models = this.props.models;\n    return (\n      <Grid container>\n        <Grid item sm>\n          <Paper style={styles.paper}>\n\n            <FormControlLabel\n              control={<Checkbox checked={this.state.downloadAfterRun} color=\"primary\"\n                onChange={this.handleCheckboxClick} />\n              }\n              label=\"Download log\"\n            />\n\n            <TextField\n              id=\"per_model_num_epochs\"\n              label=\"Epochs per model\"\n              value={this.state.per_model_epochs}\n              onChange={event => {\n                const val = event.target.value;\n                this.setState(state => {\n                  state.per_model_epochs = val;\n                  return state;\n                });\n                console.log(\"Epochs \", this.state.per_model_epochs);\n              }} />\n\n\n            <List component=\"ul\">\n              {models.map(model => (\n                <ListItem\n                  button\n                  key={model.id}\n                  onClick={() => handleModelClickSingle(model, this.state.per_model_epochs, this.state.downloadAfterRun)}\n                >\n                  <ListItemText primary={model.title} />\n                </ListItem>\n              ))}\n            </List>\n          </Paper>\n        </Grid>\n\n        {/* right gird */}\n        <Grid item sm>\n          <Paper style={styles.paper}>\n            <Typography\n              variant=\"h3\"\n              style={{ marginTop: 20, marginBottom: 20, display: \"block\" }}\n            >\n              Run all models\n            </Typography>\n\n            <div>\n              <ModelButton models={models} epochs={2} downloadAfterRun={this.state.downloadAfterRun} />\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"large\"\n                onClick={() => {\n                  this.setState(state => {\n                    state.viewConsole = !state.viewConsole;\n                    return state;\n                  });\n                }}\n              >\n                Console\n              </Button>\n            </div>\n            <div>{this.showConsoleComponent()}</div>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n","export const models = [\n  {\n    id: \"resnet_v1.5_224\",\n    title: \"Resnet50 V1.50\",\n    description: \"Resnet50 V1.50,size 224\",\n    shape: [1, 3, 224, 224],\n    saved_model: \"resnetv1.5_224.onnx\"\n  },\n  {\n    id: \"mobilenet_v1_224\",\n    title: \"MobileNet V1 224\",\n    description: \"MobileNet V1,size 224\",\n    shape: [1, 3, 224, 224],\n    saved_model: \"mobilenetv1_224.onnx\"\n  },\n  {\n    id: \"ssd_resnet34_1200\",\n    title: \"SSD ResNet34 1200\",\n    description: \"SSD ResNet34 ,size 1200\",\n    shape: [1, 3, 1200, 1200],\n    saved_model: \"ssd_resnet34_1200_patch.onnx\"\n  },\n  {\n    id: \"ssd_mobileNet_v1_300\",\n    title: \"SSD MobileNet 300\",\n    description: \"SSD MobileNet 300 ,size 1200\",\n    shape: [1, 3, 300, 300],\n    saved_model: \"ssd_mobilenetv1_300_patch.onnx\"\n  }\n];\n","import React, { Component, Fragment } from \"react\";\nimport { Header, Footer } from \"./Layouts\";\nimport Models from \"./Models\";\nimport { models } from \"../store.js\";\n\nexport default class extends Component {\n  state = {\n    models: models\n  };\n\n  render() {\n    if (window.File && window.FileReader && window.FileList && window.Blob) {\n      console.log(\"File reading okay\");\n    } else {\n      alert(\"The File APIs are not fully supported by your browser.\");\n    }\n    // run_model(\"mobilenetv1_224.onnx\", [1, 3, 224, 224]);\n    return (\n      <Fragment>\n        <Header />\n        <Models models={this.state.models} />\n      </Fragment>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}